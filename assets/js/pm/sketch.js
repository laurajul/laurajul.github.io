async function startVisualization(t){city=t,isFetching=!0,hasData=!1,hasError=!1,pm25particles=[],pm10particles=[];try{const t=await fetch(`${API_PATH}${city}${API_TOKEN}`),e=await t.json();"ok"===e.status?(aqi=e,station=e.data.city.name,updateData(),hasData=!0):(hasError=!0,errorMessage=`Could not find data for "${city}".\nPlease try another city.`)}catch(t){hasError=!0,errorMessage="Network error. Please try again."}finally{isFetching=!1}}function preload(){const t=[];for(let e=1;e<=17;e++){const a=new Promise(((t,a)=>{const i=`${sketchAssetPath}images/pm25_${e}.png`;particleImg[e]=loadImage(i,t,a)}));t.push(a)}Promise.all(t).then((()=>{})).catch((()=>{}))}function setup(){const t=document.getElementById("p5-canvas-container");createCanvas(t.offsetWidth,t.offsetHeight).parent("p5-canvas-container"),baseTextSize=.09*min(width,height),targetFrameColor=color(100,100,100),startVisualization("Beijing")}function draw(){background(255),colorMode(RGB);const t=aqiToRgb(airQuality);targetFrameColor=color(t.r,t.g,t.b),drawFrameTransition(),isFetching?drawMessage(`Fetching data for ${city}...`):hasError?drawMessage(errorMessage):hasData?(drawInterface(),manageParticles(pm10particles,pm10,20),manageParticles(pm25particles,pm25,10),millis()-lastUpdateTime>1e4&&(lastUpdateTime=millis(),startVisualization(city))):drawMessage("Enter a city to begin.")}function drawMessage(t){textAlign(CENTER,CENTER),textSize(.3*baseTextSize),textStyle(NORMAL),fill(100),text(t,width/2,height/2)}function updateData(){try{pm25=aqi.data.iaqi.pm25?.v||0,pm10=aqi.data.iaqi.pm10?.v||0,airQuality=aqi.data.aqi||0,station=aqi.data.city.name;const t=station.split(",").map((t=>t.trim()));aqiCity=city,aqiStation=t[0]||"Unknown Station",aqiCountry=t[t.length-1]?.toUpperCase()||"UNKNOWN COUNTRY",airQualityIndexText=getAirQualityText(airQuality),lastUpdateTime=millis()}catch(t){hasError=!0,errorMessage="Error processing API data."}}function drawInterface(){let t=.08*width,e=.08*width,a=.12*height,i=.09*height;fill(red(targetFrameColor),green(targetFrameColor),blue(targetFrameColor)),textAlign(LEFT,TOP),textStyle(BOLD),textSize(t);let r=splitTextIntoLines(aqiCity.toUpperCase());for(let t=0;t<r.length;t++)text(r[t],e,a+t*i);let n=a+r.length*i;textStyle(ITALIC),textSize(.5*t);let s=splitTextIntoLines(aqiStation);for(let t=0;t<s.length;t++)text(s[t],e,n+t*(.6*i));n+=s.length*(.6*i),textStyle(NORMAL),textSize(.4*t),text(aqiCountry,e,n+.5*i),textAlign(RIGHT,BOTTOM),textStyle(BOLD),textSize(.8*t),text(airQuality,width-e,height-a),textStyle(NORMAL),textSize(.4*t),text(airQualityIndexText,width-e,height-a-.8*i),textAlign(LEFT,TOP)}function splitTextIntoLines(t){let e=t.split(" "),a=[],i="",r=.8*width;for(let t of e){let e=i+(i.length>0?" ":"")+t;textWidth(e)>r&&i.length>0?(a.push(i),i=t):i=e}return a.push(i),a}function manageParticles(t,e,a){for(;t.length<e&&t.length<500;)t.push(new Particle(a));for(;t.length>e;)t.pop();for(let e of t)e.createParticle(),e.moveParticle()}function windowResized(){const t=document.getElementById("p5-canvas-container");t&&(resizeCanvas(t.offsetWidth,t.offsetHeight),baseTextSize=.09*min(width,height))}function aqiToRgb(t){return t<=50?{r:120,g:216,b:230}:t<=100?{r:255,g:255,b:102}:t<=150?{r:255,g:153,b:51}:t<=200?{r:255,g:102,b:102}:t<=300?{r:153,g:102,b:255}:{r:128,g:0,b:0}}function drawFrameTransition(){let t=9,e=.003*min(width,height),a=255,i=a/t;if(targetFrameColor)for(let r=0;r<t;r++){let t=r*e,n=width-2*t,s=height-2*t,o=a-r*i;stroke(red(targetFrameColor),green(targetFrameColor),blue(targetFrameColor),o),strokeWeight(e),noFill(),rect(t,t,n,s)}}function getAirQualityText(t){return t<50?"Good":t<100?"Moderate":t<150?"Unhealthy for Sensitive Groups":t<200?"Unhealthy":t<300?"Very Unhealthy":"Hazardous"}let pm10,pm25,particleImg=[];const API_PATH="https://api.waqi.info/feed/",API_TOKEN="/?token=560a02f3c03631403153c87c17bd47a5521bd3a3";let aqi,airQualityIndexText,station,baseTextSize,targetFrameColor,lastUpdateTime=0,city="",pm25particles=[],pm10particles=[],airQuality=50,isFetching=!1,hasData=!1,hasError=!1,errorMessage="";class Particle{constructor(t){this.x=random(width),this.y=random(height),this.xSpeed=random(-.5,.5),this.ySpeed=random(-.5,.5),this.randomShape=floor(random(1,particleImg.length)),this.diameter=random(4,t),this.angle=random(TWO_PI),this.rotationSpeed=random(-.05,.05)}createParticle(){push(),translate(this.x,this.y),rotate(this.angle),particleImg[this.randomShape]?image(particleImg[this.randomShape],-this.diameter/2,-this.diameter/2,this.diameter,this.diameter):ellipse(0,0,this.diameter),pop()}moveParticle(){this.x+=this.xSpeed,this.y+=this.ySpeed,(this.x<0||this.x>width)&&(this.xSpeed*=-1),(this.y<0||this.y>height)&&(this.ySpeed*=-1),this.angle+=this.rotationSpeed}}